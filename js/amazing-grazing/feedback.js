/*!
 * Last Edited: 25/10/2020
 * 
 * Developed by: MC CM Team (Monash Students)
 * Project Name: Amazing Grazing
 * Project Description: Protecting Australia Grasslands by 
 *					    encouraging farmer education
 *
 * Usage:
 *  - "Feedback" button that appears on the right side of every page
 *
 * Description:
 *  - Controls stars/rating clicks: 
 *    * checks the star that user clicks 
 *    * checks all the stars before user's clicked star
 *    * unchecks all the stars after users star
 *  - Counts how many characters inside the user feedback input form
 *  - [MOBILE DEVICE ONLY] Hides the feedback button when scrolled down
 *  - Sends users feedback to database using ajax through 'feedback.php' file,
      but uses CSRF-token generated by the user to ensure that no data forgery is done.
 *
 * This file is called by every website page:
 *  - index.php
 *  - employment-statistics.php
 *  - livestock-statistics.php
 *  - techniques.php
 *  - drought.php
 *  - invasive-species.php
*/

$(function() {
	/* 
		Description: form sending manipulations
		Pre-condition:
		  - submit button within the form with ID 'feedback-form' must be clicked
		  - user needs to write their input in the form input area with ID 'page-received'
		Post-condition
		  - count how many stars user has selected
		  - receive users input
		  - send csrf-token, # of stars, feedback text, captcha response, and current page
			to the Apache server (PHP
		Return:
		  - Unssuccessful update, which triggers relevant notification
		  - Successful update, which triggers relevant notification
		  - error-captcha, which triggers notification that states that there are issues with captcha
		  - Error writing to database
	*/
	$("#feedback-form form").on('submit', function(event) {
		event.preventDefault();
		var $form = $(this);
		
		/* Count how many stars are currently checked */
		cStars = 5;
		for (i=1; i<6; i++) {
			if ($('#rate-'+i).attr('class').includes('unchecked')) {
				cStars--;	
			}
		}
		
		var form_text = $('#form-text').val();
		var page_received = $('#page-received').attr('class');
		
		$.ajax({
			type: $form.attr('method'),
			cache: false,
			url: 'php/feedback.php',
			headers: {
				'CsrfToken': $('meta[name="csrf-token"]').attr('content')
			},
			data: {stars: cStars,
				   feedback: form_text,
				   response: grecaptcha.getResponse(),
				   page: page_received},
			success: function(data) {
				if (data.feedback == "Unsuccessful update") {
					var x = document.getElementById("feedback-not-sent");
					x.className = "show"; // trigger notification update
					setTimeout(function(){ x.className = x.className.replace("show", ""); }, 4000);
					grecaptcha.reset();
				} else if (data.feedback == "Successful update") {
					var x = document.getElementById("feedback-sent");
					$('#form-text').val(''); // reset the #form-text
					x.className = "show"; // trigger notification update
					setTimeout(function(){ x.className = x.className.replace("show", ""); }, 4000);
					grecaptcha.reset();
				} else if (data.feedback == "feedback-bracket-character") {
					var x = document.getElementById("feedback-bracket-character");
					x.className = "show"; // trigger notification update
					setTimeout(function(){ x.className = x.className.replace("show", ""); }, 4000);
					grecaptcha.reset();
				} else {
					var x = document.getElementById("feedback-captcha");
					x.className = "show"; // trigger notification update
					setTimeout(function(){ x.className = x.className.replace("show", ""); }, 4000);
				}
			}, 
			error: (error) => {
				console.log(JSON.stringify(error));
			}
		});
	});
  
	/* 
		Description: control checking/unchecking stars
		Pre-condition:
		  - list table must be available that keeps track of all 5 stars
		  - user needs to click on the star to trigger it
		Post-condition
		  - enables stars before user's star & user star
		  - disables stars after user's star & user star
		Return:
		  - none, but updates stars visually
	*/
	var list=['rate-1','rate-2','rate-3','rate-4','rate-5'];
	list.forEach(function(element) {
		document.getElementById(element).addEventListener('click', function(){
			var cls = document.getElementById(element).className;
			for (i=1; i<=5; i++) {
				if ((element == ('rate-'+i))) {
					for (j=i; j>0; j--) { // check the clicked star and everything before
						document.getElementById('rate-'+j).classList.remove('unchecked');
						document.getElementById('rate-'+j).classList.add('checked');
					}
					
					for (j=i+1; j<=5; j++) { // uncheck everything after the clicked star
						document.getElementById('rate-'+j).classList.remove('checked');
						document.getElementById('rate-'+j).classList.add('unchecked');
					}
				}
			}
		});
	});
	
	/* 
		Description: count how many characters inputed by the user
		Pre-condition:
		  - user needs to input something inside the feedback input with id 'form-text'
		Post-condition
		  - uses build in functions to calculate characters
		Return:
		  - none, but vissually returns the value to the text box with id 'count-characters'
	*/
	$("#form-text").keyup(function(){
	  $("#count-characters").text('Characters: ' + $(this).val().length);
	});
	
	/* 
		Description: enable hiding feedback floating button on mobile devices
		Pre-condition:
		  - screen size needs to be less than 611 for it to start disappearing
		  - if tests are done on web browser, page needs to be refreshed
		Post-condition
		  - scrolling more than 200, will modify the class of the floating feedback
		Return:
		  - none, but replace the class to make it appear/disappear
	*/
	if (screen.width < 611) {
		$(window).scroll(function(){ /* Hides the window if it is at the top */
			var $win = $(window);
			if ($win.scrollTop() > 200) {
				$('#feedback-tab').addClass('inactive-feedback');
			} else {
				$('#feedback-tab').removeClass('inactive-feedback');
			}
		});
	}
});


